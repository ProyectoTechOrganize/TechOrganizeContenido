-- MySQL Script generated by MySQL Workbench
-- Fri Jun 23 09:21:13 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Tech Organice
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Tech Organice
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Tech Organice` DEFAULT CHARACTER SET utf8 ;
USE `Tech Organice` ;

-- -----------------------------------------------------
-- Table `Tech Organice`.`ROL`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`ROL` (
  `id_ROL` INT NOT NULL COMMENT 'Codigo del rol (01-Cliente/02-Administrador)',
  `Nombre_Rol` VARCHAR(45) NOT NULL COMMENT 'Nonmbre de rol asignado al usuario',
  PRIMARY KEY (`id_ROL`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`tipo de documento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`tipo de documento` (
  `id_tipoDocumento` VARCHAR(10) NOT NULL COMMENT 'Numero de Documento\n',
  `nombre_tipoDocumento` INT NOT NULL COMMENT 'Tipo de Documento del Usuario',
  `acronimo` INT NOT NULL COMMENT 'Acronimo del Tipo de Documento',
  PRIMARY KEY (`id_tipoDocumento`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Usuario` (
  `numeroDocumento` INT NOT NULL COMMENT 'Numero del documento del Usuario',
  `tipo de documento_id_tipoDocumento` VARCHAR(10) NOT NULL COMMENT 'Tipo del documento del Usuario',
  `NombreUsuario` VARCHAR(45) NOT NULL COMMENT 'Nombre que tendra el Usuario en la pagina',
  `Correo` INT NOT NULL COMMENT 'Correo con el cual ingresara el Usuario',
  `numerocelular` VARCHAR(45) NOT NULL COMMENT 'Numero del celular del Usuario para recuperacion de cuenta',
  `Password` VARCHAR(15) NOT NULL COMMENT 'Contraseña que tendra el Usuario (Max 10 caracteres-Min 6 caracteres)',
  `ROL_id_ROL` INT NOT NULL COMMENT 'Rol asignado al Usuario',
  PRIMARY KEY (`numeroDocumento`, `tipo de documento_id_tipoDocumento`),
  INDEX `fk_Usuario_ROL1_idx` (`ROL_id_ROL` ASC),
  INDEX `fk_Usuario_tipo de documento1_idx` (`tipo de documento_id_tipoDocumento` ASC),
  CONSTRAINT `fk_Usuario_ROL1`
    FOREIGN KEY (`ROL_id_ROL`)
    REFERENCES `Tech Organice`.`ROL` (`id_ROL`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Usuario_tipo de documento1`
    FOREIGN KEY (`tipo de documento_id_tipoDocumento`)
    REFERENCES `Tech Organice`.`tipo de documento` (`id_tipoDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'usuario se registra en la pagina\ncrea un nombre de usuario\n';


-- -----------------------------------------------------
-- Table `Tech Organice`.`reporteserrores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`reporteserrores` (
  `Administrador` INT NOT NULL COMMENT 'Se encargara de revisar y solucionar los Reportes enviados',
  `Usuario_numeroDocumento` INT NOT NULL COMMENT 'Numero del documento del Usuario',
  `solicitudreportes` VARCHAR(45) NOT NULL COMMENT 'Solicitud de reporte enviada por el Usuario',
  PRIMARY KEY (`Administrador`),
  INDEX `fk_reporteserrores_Usuario1_idx` (`Usuario_numeroDocumento` ASC),
  CONSTRAINT `fk_reporteserrores_Usuario1`
    FOREIGN KEY (`Usuario_numeroDocumento`)
    REFERENCES `Tech Organice`.`Usuario` (`numeroDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'dado que los reportes pueden ser muchos';


-- -----------------------------------------------------
-- Table `Tech Organice`.`Archivos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Archivos` (
  `Usuario_numeroDocumento` INT NOT NULL COMMENT 'Numero del documento del Usuario',
  `ID_Archivo` VARCHAR(10) NOT NULL COMMENT 'Codigo de identificacion del Archivo',
  `NombreArchivo` INT NOT NULL COMMENT 'Nombre que tiene el Archivo',
  `TipoArchivo` VARCHAR(45) NOT NULL COMMENT 'Tipo de Extension del Archivo',
  `fechaSubida` VARCHAR(45) NOT NULL COMMENT 'Fecha en la que subio el Archivo',
  `PesoArchivo` VARCHAR(45) NOT NULL COMMENT 'Peso que tiene el Archivo',
  INDEX `fk_Archivos_Usuario1_idx` (`Usuario_numeroDocumento` ASC),
  PRIMARY KEY (`ID_Archivo`),
  CONSTRAINT `fk_Archivos_Usuario1`
    FOREIGN KEY (`Usuario_numeroDocumento`)
    REFERENCES `Tech Organice`.`Usuario` (`numeroDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Los cliente pueden buscar los Archivos por fecha, tipo de archivos y tamaño';


-- -----------------------------------------------------
-- Table `Tech Organice`.`almacenamientonube`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`almacenamientonube` (
  `ID_Almacenamiento` INT NOT NULL COMMENT 'Codigo para identificar el tipo de almacenamiento',
  `AlmacenamientoEstandar` BLOB(50) NOT NULL COMMENT '50 GB de espacio basico',
  `Almacenamiento 1` BLOB(100) NOT NULL COMMENT '100GB de espacio de almacenamiento',
  `Almacenamiento 2` BLOB(200) NOT NULL COMMENT '200GB de espacio de almacenamiento',
  `Almacenamiento 3` BLOB(500) NOT NULL COMMENT '500GB de espacio de almacenamiento',
  `Archivos_ID_Archivo` VARCHAR(10) NOT NULL COMMENT 'Codigo del Archivo',
  PRIMARY KEY (`ID_Almacenamiento`),
  INDEX `fk_almacenamientonube_Archivos1_idx` (`Archivos_ID_Archivo` ASC),
  CONSTRAINT `fk_almacenamientonube_Archivos1`
    FOREIGN KEY (`Archivos_ID_Archivo`)
    REFERENCES `Tech Organice`.`Archivos` (`ID_Archivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Log Error/Virus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Log Error/Virus` (
  `Id_Archivo` INT NOT NULL COMMENT 'Codigo del Archivo con Virus/Error',
  `RecuperarArchivo` INT NOT NULL COMMENT 'Recuperar Archivo del Baul',
  `BorrarArchivo` INT NOT NULL COMMENT 'Borrar Archivo permanentemente',
  `Descripcion_Error/Virus` VARCHAR(45) NOT NULL COMMENT 'Descripcion del Error/Virus',
  `Fecha_Error/Virus` VARCHAR(45) NOT NULL COMMENT 'Fecha en la que se genero el Error/Virus',
  `Hora_Error/Virus` VARCHAR(45) NOT NULL COMMENT 'Hora en la que se genero el Error/Virus',
  PRIMARY KEY (`Id_Archivo`))
ENGINE = InnoDB
COMMENT = 'Todos los archivos que tiene virus seran enviados  a este baul de virus';


-- -----------------------------------------------------
-- Table `Tech Organice`.`Factura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Factura` (
  `ID_Factura` INT NOT NULL COMMENT 'Codigo de compra',
  `Numero Factura` VARCHAR(45) NOT NULL COMMENT 'Numero que posee la factura',
  `Nombre Usuario` VARCHAR(45) NOT NULL COMMENT 'Nombre del Usuario',
  `Correo Usuario` VARCHAR(45) NOT NULL COMMENT 'Correo del Usuario',
  PRIMARY KEY (`ID_Factura`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Plan Deseado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Plan Deseado` (
  `ID_Plan` INT NOT NULL COMMENT 'Codigo del plan',
  `Duracion Plan` VARCHAR(45) NOT NULL COMMENT 'Tiempo designado para el plan',
  `Descripcion Plan` VARCHAR(45) NOT NULL COMMENT 'Tipo de plan que desea (100, 200 o 500 GB)',
  `Precio Plan` VARCHAR(45) NOT NULL COMMENT 'Precio del plan deseado',
  PRIMARY KEY (`ID_Plan`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Plan Deseado_has_Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Plan Deseado_has_Usuario` (
  `Plan Deseado_ID_Plan` INT NOT NULL COMMENT 'Llave foranea de Plan Deseado',
  `Usuario_numeroDocumento` INT NOT NULL COMMENT 'Llave foranea numero documento Usuario',
  PRIMARY KEY (`Plan Deseado_ID_Plan`, `Usuario_numeroDocumento`),
  INDEX `fk_Plan Deseado_has_Usuario_Usuario1_idx` (`Usuario_numeroDocumento` ASC),
  INDEX `fk_Plan Deseado_has_Usuario_Plan Deseado1_idx` (`Plan Deseado_ID_Plan` ASC),
  CONSTRAINT `fk_Plan Deseado_has_Usuario_Plan Deseado1`
    FOREIGN KEY (`Plan Deseado_ID_Plan`)
    REFERENCES `Tech Organice`.`Plan Deseado` (`ID_Plan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Plan Deseado_has_Usuario_Usuario1`
    FOREIGN KEY (`Usuario_numeroDocumento`)
    REFERENCES `Tech Organice`.`Usuario` (`numeroDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Factura Compra_has_Plan Deseado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Factura Compra_has_Plan Deseado` (
  `Factura Compra_ID_Factura` INT NOT NULL COMMENT 'Lllave foranea de Factura',
  `Plan Deseado_ID_Plan` INT NOT NULL COMMENT 'Llave foranea de Plan Deseado',
  PRIMARY KEY (`Factura Compra_ID_Factura`, `Plan Deseado_ID_Plan`),
  INDEX `fk_Factura Compra_has_Plan Deseado_Plan Deseado1_idx` (`Plan Deseado_ID_Plan` ASC),
  INDEX `fk_Factura Compra_has_Plan Deseado_Factura Compra1_idx` (`Factura Compra_ID_Factura` ASC),
  CONSTRAINT `fk_Factura Compra_has_Plan Deseado_Factura Compra1`
    FOREIGN KEY (`Factura Compra_ID_Factura`)
    REFERENCES `Tech Organice`.`Factura` (`ID_Factura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Factura Compra_has_Plan Deseado_Plan Deseado1`
    FOREIGN KEY (`Plan Deseado_ID_Plan`)
    REFERENCES `Tech Organice`.`Plan Deseado` (`ID_Plan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Pago` (
  `id_Pago` INT NOT NULL COMMENT 'Codigo generado en base al pago',
  `Tipo_De_Pago` VARCHAR(45) NOT NULL COMMENT 'Tipo de pago que ejecutara',
  `Factura_ID_Factura` INT NOT NULL COMMENT 'Codigo de la factura generada',
  `Factura_Plan Deseado_ID_Plan` INT NOT NULL COMMENT 'Codigo del plan',
  `Factura_Plan Deseado_Usuario_numeroDocumento` INT NOT NULL COMMENT 'Numero del documento del Usuario',
  PRIMARY KEY (`id_Pago`),
  INDEX `fk_Pago_Factura1_idx` (`Factura_ID_Factura` ASC, `Factura_Plan Deseado_ID_Plan` ASC, `Factura_Plan Deseado_Usuario_numeroDocumento` ASC),
  CONSTRAINT `fk_Pago_Factura1`
    FOREIGN KEY (`Factura_ID_Factura`)
    REFERENCES `Tech Organice`.`Factura` (`ID_Factura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tech Organice`.`Configuraciones Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tech Organice`.`Configuraciones Usuario` (
  `ID_Cuenta` INT NOT NULL,
  `Cambiar_Nombre` INT NOT NULL COMMENT 'El usuario podra cambiar su nombre',
  `Cambiar_Imagen` VARCHAR(45) NOT NULL COMMENT 'El usuario podra cambiar su imagen de perfil (20 MB MAX)',
  `Cambiar_Imagen_Fondo` VARCHAR(45) NOT NULL COMMENT 'El usuario podra cambiar la imagen del fondo de su cuenta (20 MB MAX)',
  `Usuario_numeroDocumento` INT NOT NULL COMMENT 'Llave foranea Usuario',
  PRIMARY KEY (`ID_Cuenta`, `Usuario_numeroDocumento`),
  INDEX `fk_Configuraciones Usuario_Usuario1_idx` (`Usuario_numeroDocumento` ASC),
  CONSTRAINT `fk_Configuraciones Usuario_Usuario1`
    FOREIGN KEY (`Usuario_numeroDocumento`)
    REFERENCES `Tech Organice`.`Usuario` (`numeroDocumento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
